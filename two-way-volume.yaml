blueprint:
  name: Two-Way Volume Sync with Optional Nonlinear Scaling
  description:
    Synchronize volume between a virtual media player (e.g. Squeezelite)
    and a real amplifier, with optional nonlinear scaling (square root/square), volume
    capping, and loop prevention using state-based comparison and tolerance.
  domain: automation
  input:
    virtual_player:
      name: Virtual Media Player (control)
      description: Dummy or control-only media player (e.g. Squeezelite).
      selector:
        entity:
          domain:
            - media_player
          multiple: false
    real_player:
      name: Real Media Player (volume)
      description: The actual AVR or amp whose volume is controlled.
      selector:
        entity:
          domain:
            - media_player
          multiple: false
    scale_factor:
      name: Volume cap (scale)
      description:
        Multiplier used during volume transformation to cap the amp volume,  e.g.
        volume = control*scale.
      default: 0.7
      selector:
        number:
          min: 0.1
          max: 1.0
          step: 0.01
          mode: slider
    use_nonlinear_scaling:
      name: Use Nonlinear Scaling
      description:
        If true, uses (Square/Square Root) for more natural volume control  on
        the amplifier, such that amplifier volue is square root of virtual volume,  i.e.
        volume = (control ** 0.5) * cap. If false, uses linear scaling.
      default: true
      selector:
        boolean: {}
  source_url: https://github.com/thebigspin/ha-blueprints/blob/main/two-way-volume.yaml
variables:
  scale_factor: !input scale_factor
  scale: "{{ float(scale_factor) }}"
  use_nonlinear_scaling: !input use_nonlinear_scaling
  nonlinear: "{{ use_nonlinear_scaling | lower == 'true' }}"
  virtual_player: !input virtual_player
  virt: "{{ state_attr(virtual_player, 'volume_level') }}"
  virt_scaled: "{{ ((virt ** 0.5 * scale) if nonlinear else (virt * scale)) | round(2) }}"
  real_player: !input real_player
  real: "{{ state_attr(real_player, 'volume_level') }}"
  real_scaled: "{{ (((real / scale) ** 2) if nonlinear else (real / scale)) | round(2) }}"
triggers:
  - trigger: state
    entity_id: !input virtual_player
    attribute: volume_level
    id: virtual
  - trigger: state
    entity_id: !input real_player
    attribute: volume_level
    id: real
condition:
  - condition: template
    value_template: "{{ (real_scaled - virt) | abs > 0.005}}"
action:
  - choose:
      - conditions:
          - condition: trigger
            id: virtual
        sequence:
          - action: media_player.volume_set
            target:
              entity_id: !input real_player
            data:
              volume_level: "{{ virt_scaled }}"
      - conditions:
          - condition: trigger
            id: real
        sequence:
          - action: media_player.volume_set
            target:
              entity_id: !input virtual_player
            data:
              volume_level: "{{ real_scaled }}"
mode: queued
